import httplib2
import os
import sys

from apiclient.discovery import build_from_document
from apiclient.errors import HttpError
from oauth2client.client import flow_from_clientsecrets
from oauth2client.file import Storage
from oauth2client.tools import argparser, run_flow


# The CLIENT_SECRETS_FILE variable specifies the name of a file that contains

# the OAuth 2.0 information for this application, including its client_id and
# client_secret. You can acquire an OAuth 2.0 client ID and client secret from
# the {{ Google Cloud Console }} at
# {{ https://cloud.google.com/console }}.
# Please ensure that you have enabled the YouTube Data API for your project.
# For more information about using OAuth2 to access the YouTube Data API, see:
#   https://developers.google.com/youtube/v3/guides/authentication
# For more information about the client_secrets.json file format, see:
#   https://developers.google.com/api-client-library/python/guide/aaa_client_secrets
CLIENT_SECRETS_FILE = "client_secrets.json"

# This OAuth 2.0 access scope allows for full read/write access to the
# authenticated user's account and requires requests to use an SSL connection.
YOUTUBE_READ_WRITE_SSL_SCOPE = "https://www.googleapis.com/auth/youtube.force-ssl"
YOUTUBE_API_SERVICE_NAME = "youtube"
YOUTUBE_API_VERSION = "v3"

# This variable defines a message to display if the CLIENT_SECRETS_FILE is
# missing.
MISSING_CLIENT_SECRETS_MESSAGE = """
WARNING: Please configure OAuth 2.0

To make this sample run you will need to populate the client_secrets.json file
found at:
   %s
with information from the APIs Console
https://console.developers.google.com

For more information about the client_secrets.json file format, please visit:
https://developers.google.com/api-client-library/python/guide/aaa_client_secrets
""" % os.path.abspath(os.path.join(os.path.dirname(__file__),
                                   CLIENT_SECRETS_FILE))

# Authorize the request and store authorization credentials.
def get_authenticated_service(args):
  flow = flow_from_clientsecrets(CLIENT_SECRETS_FILE, scope=YOUTUBE_READ_WRITE_SSL_SCOPE,
    message=MISSING_CLIENT_SECRETS_MESSAGE)

  storage = Storage("%s-oauth2.json" % sys.argv[0])
  credentials = storage.get()

  if credentials is None or credentials.invalid:
    credentials = run_flow(flow, storage, args)

  # Trusted testers can download this discovery document from the developers page
  # and it should be in the same directory with the code.
  with open("youtube-v3-discoverydocument.json", "r", encoding="utf8") as f:
    doc = f.read()
    return build_from_document(doc, http=credentials.authorize(httplib2.Http()))


def get_comment_threads(youtube, youtube_videos, channel_id):
  """get_comment_threads: Used to get comments of a youtube video. Returns a matrix of video_name, comment of comments 
                      and like count repetively. Also returns object generated by commentThreads().list in order to search 
                      for comments of comments  
    Input- 
          youtube: a object generated by get_authenticated_service when called
          youtube_videos: is a list --- [video_name, video_id]
    Output- 
          result["items"]: items portion of generated by commentThreads().list
          dataset: video_name, comment of comments and like count repetively. Note does not include comments of comments
                  Need to call get_comments to get them 
  """
  results = youtube.commentThreads().list(
    part="snippet",
    videoId=youtube_videos[1],  #second index stores the video id
    #allThreadsRelatedToChannelId= channel_id,
    textFormat="plainText",
    maxResults=100,
    #searchTerms="internet"
  ).execute()

  dataset = []
  for item in results["items"]:
    comment = item["snippet"]["topLevelComment"]
    like_count = comment["snippet"]["likeCount"]
    text = comment["snippet"]["textDisplay"].replace("\n", " ");
    dataset.append([youtube_videos[0] , text, like_count])
    #print("Reply Count: {}	Like Count: {}	Comment by {}: {}".format(reply_count,like_count,author, text))

  return results["items"], dataset


def get_comments(youtube, video_comment_threads, video_name): 
  """get_comments: Used to get comments of comments. Returns a matrix of video_name, comment of comments 
                      and like count repetively 
    Input- 
          youtube: a object generated by get_authenticated_service when called
          video_comment_threads: Object created from get_comments_thread method 
          video_name: name of video for comments search
    Output- 
          dataset: video_name, comment of comments and like count repetively 
  """
  for comment in video_comment_threads:   
     results = youtube.comments().list(
       part="snippet",
       parentId=comment["id"],
       textFormat="plainText"
     ).execute()
     dataset = []
     for item in results["items"]:
       text = item["snippet"]["textDisplay"].replace("\n", " ");
       like_count = item["snippet"]["likeCount"]
       dataset.append([video_name , text , like_count])
       #print("Like Count: {}	Comment by {}: {}".format(like_count,author, text))
  return dataset

def search_channel(youtube, channel_id):
  """search_channel: Returns a matrix of youtube videos and respected video ids for a specific channel 
    Input- 
          youtube: a object generated by get_authenticated_service when called
          channel_id: Id of channel. For example, for https://www.youtube.com/channel/UC38IQsAvIsxxjztdMZQtwHA 
                      the channel id is UC38IQsAvIsxxjztdMZQtwHA
    Output- 
          video_names_and_id: video name and respected id
  """
  results = youtube.search().list(
		part="snippet",
		channelId=channel_id,
		maxResults=15,
		order="date",
    publishedBefore= "2017-09-13T00:00:00Z"
	).execute()
  video_names_and_id = [] 
  for item in results["items"]:
    if item["id"]["kind"] == "youtube#video":
      video_names_and_id.append([item["snippet"]["title"], item["id"]["videoId"]])
      #print("Title: {}".format(item["snippet"]["title"]))
  return video_names_and_id
